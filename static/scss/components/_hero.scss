.hero {
  color: $white;
  /* Fallback background color to avoid white/transparent flashing during
     slide transitions. Keep it dark so layered gradients blend in while
     images/gradients load or during transform animations. */
  background-color: #121217; /* dark neutral fallback */
  /* Anchor absolutely-positioned UI (dots/arrows) to the hero container so
     their `bottom`/`left` values align with the hero on all viewports. */
  position: relative;
  overflow: hidden; // hide off-screen slides for sliding animation

  // Let the Bootstrap container actually inherit the hero's height
  > .container-fluid {
    min-height: inherit;  // picks up the hero's min-height/height
    height: 100%;

    @include media-breakpoint-up(xl) {
      min-height: 100%;
      height: 100%;
    }
  }

  /* 1) Make height stable on mobile with svh (fallback to dvh) */
  min-height: 50svh;
  @supports not (height: 100svh) { min-height: 50dvh; }

  width: 100%;

  /* Desktop/tablet: fixed height that’s stable */
  @include media-breakpoint-up(xl) {
    height: calc(100svh - 100px);
    min-height: calc(100svh - 100px); // ensure min-height exists at xl too
    @supports not (height: 100svh) { height: calc(100dvh - 100px); }
  }

  /* Slides are positioned absolutely and animated via transform so
     they can slide in from the right. We keep their internal layout
     as flex to preserve the existing content alignment. */
  .hero-slide {
    position: absolute;
    inset: 0 0 0 0; /* fill the hero container */
    display: flex;
    align-items: flex-end;       /* bottom-anchored */
    justify-content: flex-start; /* left-aligned */
    pointer-events: none; /* prevent interaction with non-active slides */

    /* Ensure the slide fills the hero’s computed height */
    min-height: inherit;

    /* Bottom-only padding so content sits above the edge consistently */
    padding: 0 0.5rem 3.5rem; // mobile: small padding

    @include media-breakpoint-up(xl) {
      padding: 0 0.5rem 3.5rem; // fixed padding on desktop
      height: 100%;
      min-height: 100%;
    }

  /* Initial/off-screen state: positioned to the right */
    transform: translateX(100%);
    opacity: 0;
    transition: transform 520ms cubic-bezier(.2,.9,.25,1), opacity 320ms ease;
  /* GPU hint to reduce flicker during transforms */
  will-change: transform, opacity;
  backface-visibility: hidden;

  /* Static background properties now defined here (CSP-safe) */
  background-repeat: no-repeat;
  background-position: center center;
  /* Base size; zoom states adjust via data-zoom & active classes */
  background-size: 100% auto;
  /* Provide a baseline transition for background-size so JS doesn't inline styles */
  transition: transform 520ms cubic-bezier(.2,.9,.25,1), opacity 320ms ease, background-size 7000ms ease;
    
    /* Zoom in: start larger and scale down when active */
    /* Retain legacy semantic zoom directions (optional) */
    &[data-zoom="in"] {
      background-size: 120% auto;
      &.is-active { background-size: 100% auto; }
    }
    &[data-zoom="out"] {
      background-size: 100% auto;
      &.is-active { background-size: 120% auto; }
    }

    &.is-active {
      transform: translateX(0%);
      opacity: 1;
      pointer-events: auto; /* allow interaction for the active slide */
      z-index: 3;
    }

    /* When a slide is leaving (optional class) we could push it leftwards
       to create a full sliding effect. If JS adds `.is-exiting` during
       transitions we can use this; otherwise the entering slide alone
       provides a clean slide-in-up animation from the right. */
    &.is-exiting {
      transform: translateX(-30%);
      opacity: 0;
      z-index: 2;
    }
  }

  /* Optional discrete zoom percentage presets (arbitrary numeric factors) */
  .hero-slide.is-active[data-zoom="1.04"] { background-size: 104% auto; }
  .hero-slide.is-active[data-zoom="1.08"] { background-size: 108% auto; }
  .hero-slide.is-active[data-zoom="1.12"] { background-size: 112% auto; }
  .hero-slide.is-active[data-zoom="1.16"] { background-size: 116% auto; }
  .hero-slide.is-active[data-zoom="1.20"] { background-size: 120% auto; }

  .hero-slide-inner {
    position: relative;
    z-index: 2;
    max-width: 560px;
    padding-bottom: 0;
    margin-block-end: env(safe-area-inset-bottom, 0);
    overflow: visible;
  }

  .hero-headline {
    font-size: clamp(2.1rem, 6vw, 3.3rem);
    line-height: 1.1;
    margin: 0 0 .9rem;
    font-weight: 900;
    letter-spacing: -0.5px;
    padding-bottom: 4px;
    display: inline-block;
    color: #fff;
    max-width: 15ch;
  }

  .hero-subline {
    margin: 0 0 1.35rem;
    font-size: clamp(1rem, 1.2vw + .65rem, 1.25rem);
    color: #fff;
    font-weight: 500;
    max-width: 28ch;
  }

  .hero-cta {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    background: $promo-cta-color;
    color: $btn-color;
    padding: 1rem 1.55rem;
  border-radius: $btn-border-radius;
  font-weight: $btn-font-weight;
  font-size: $btn-font-size;
    text-decoration: none;
    box-shadow: $btn-box-shadow;
    transition: transform 0.25s ease, box-shadow 0.25s ease;

    /* Mobile: slightly rounded, match promo banner's mobile adjustments */
    @media (max-width: 540px) {
  padding: 0.5rem 0.9rem;
  font-size: $btn-font-size;
  border-radius: $btn-border-radius;
    }

    /* Desktop hover/focus lift preserved from promo banner */
    @media (min-width: 768px) {
      &:hover,
      &:focus {
        transform: translateY(-3px);
        box-shadow: $promo-cta-hover-shadow;
      }
    }

    /* Remove Bootstrap's default focus/active ring and active background color
       which use the Bootstrap primary (#0d6efd). Use the project's focus styling
       to keep consistent visuals and accessibility. */
    &:focus {
      /* Reset bootstrap outline/box-shadow */
      outline: none;
      box-shadow: 0 0 0 3px rgba(255,255,255,0.06); /* subtle white ring */
    }

    &:active,
    &.active {
      /* Keep background stable on press; don't inherit bootstrap active color */
      background: $promo-cta-color;
      box-shadow: $btn-box-shadow;
      transform: none; /* avoid jump on active */
    }

   /* Override Bootstrap button CSS variables locally so generic
     `.btn:focus-visible` / `.btn.active` rules don't apply the
     default blue focus/active colors to this instance. */
   --bs-btn-focus-box-shadow: 0 0 0 0.15rem rgba(255,255,255,0.06);
   --bs-btn-focus-shadow-rgb: 255,255,255;
   --bs-btn-active-bg: #{$promo-cta-color};
   --bs-btn-bg: #{$promo-cta-color};
   --bs-btn-border-color: transparent;
   /* Also ensure hover/hover-border resolve to our promo color so
     the Bootstrap `:focus-visible` state doesn't swap colors. */
   --bs-btn-hover-bg: #{$promo-cta-color};
   --bs-btn-hover-border-color: transparent;
   --bs-btn-hover-color: #{$btn-color};
  }

  /* Ensure focus-visible (used by Bootstrap) is explicitly handled so
    the browser picks our neutral ring instead of the theme blue. */
  .hero-cta:focus-visible {
   outline: none;
  box-shadow: 0 0 0 0.25rem rgba(255,255,255,0.14);
  }

  /* Specific rule for Bootstrap's focus-visible selector to ensure
    background/border/box-shadow remain consistent for hero CTA */
  .btn.hero-cta:focus-visible {
   background-color: var(--bs-btn-bg);
   border-color: var(--bs-btn-border-color);
   box-shadow: var(--bs-btn-focus-box-shadow);
   outline: none;
  }

  /* Stronger override: remove any blue ring or border coming from
     Bootstrap or the browser focus ring. This uses a more specific
     selector (two classes + parent) and comes after Bootstrap in the
     compiled CSS so it wins without needing `!important`. */
  .btn.hero-cta:focus,
  .btn.hero-cta:focus-visible {
    outline: none !important;
    box-shadow: none !important;
    border-color: transparent !important;
    background-color: var(--bs-btn-bg) !important;
  }

  /* Make sure active/pressed states don't switch to Bootstrap primary */
  .btn.hero-cta:active,
  .btn.hero-cta.active,
  .btn.hero-cta.show {
    background-color: var(--bs-btn-bg) !important;
    border-color: var(--bs-btn-border-color) !important;
    box-shadow: none !important;
  }

  /* === CAROUSEL EXTENSIONS === */

  /* Multiple slides are handled by the absolute-positioned transform
     rules above — we avoid using `display: none` so transitions on
     `transform` can run smoothly when `.is-active` is toggled. */

  /* Enhanced text containers with responsive max-widths */
  .hero-slide-inner {
    max-width: 36rem; /* mobile: ~576px */

    @include media-breakpoint-up(lg) {
      max-width: 56rem; /* desktop: ~896px */
    }
  }

  /* Text clamping for headlines */
  .hero-headline {
    /* Mobile: clamp to 2 lines */
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;

    /* Desktop: allow 3 lines */
    @include media-breakpoint-up(lg) {
      -webkit-line-clamp: 3;
      line-clamp: 3;
    }

    /* Fallback for browsers without webkit-line-clamp */
    @supports not (-webkit-line-clamp: 2) {
      max-height: 2.2em; /* approximate 2 lines */
      line-height: 1.1;
      overflow: hidden;

      @include media-breakpoint-up(lg) {
        max-height: 3.3em; /* approximate 3 lines */
      }
    }
  }

  /* Text clamping for sublines: 2 lines on all sizes */
  .hero-subline {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;

    /* Fallback for browsers without webkit-line-clamp */
    @supports not (-webkit-line-clamp: 2) {
      max-height: 2.5em; /* approximate 2 lines */
      overflow: hidden;
    }
  }

  /* Disabled CTA state
     Keep the CTA visually prominent (retain background/text colors) while
     disabling interaction. Previously opacity + grayscale were used which
     produced a "dimmed" look; remove those to preserve emphasis.
  */
  .hero-cta.is-disabled {
    /* Disable interaction but preserve visuals for consistency */
    pointer-events: none;
    cursor: not-allowed;
  }

  /* === CAROUSEL UI === */

  /* Dots container - always centered with inline arrows and dots */
  .hero__dots {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 5;
    
    display: flex;
    gap: 1rem;
    justify-content: center;
    align-items: center;
    
    @include media-breakpoint-up(lg) {
      bottom: 2rem;
    }
  }

  /* Navigation arrows - always inline within dots container */
  .hero__arrow {
    /* Minimal text-only arrows: no background, no pseudo-elements */
    background: transparent;
    border: none;
    border-radius: 0;
    
    width: auto;
    height: auto;
    
    color: $white;
    font-size: 2rem;
    cursor: pointer;
    
    display: inline-flex;
    align-items: center;
    justify-content: center;
    
    padding: 0.25rem 0.5rem;
    line-height: 1;
    
    /* Remove any CSS triangles */
    &::before { content: none; }
  
    &:focus-visible {
      outline: 2px solid rgba(255, 255, 255, 0.6);
      outline-offset: 2px;
      border-radius: 2px;
    }
    
    /* Larger arrows on desktop */
    @include media-breakpoint-up(lg) {
      font-size: 2rem;
    }
  }

  /* Individual dots */
  .hero__dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(255,255,255,0.38);
    padding: 0;
    cursor: pointer;
    transition: background .35s ease, transform .4s ease;

    &.is-active {
      background: #fff;
      transform: scale(1.6);
      box-shadow: none;
    }

    &:focus-visible {
      outline: 2px solid var(--brand-2);
      outline-offset: 2px;
    }
  }
}

// When the hero is placed immediately inside `main.pt-2` (the app's layout adds
// a small top padding), cancel that single padding so the hero background meets
// the sticky site banner without visual gap. This is intentionally scoped and
// only applies when the site uses `pt-2` on the main element.
// Spacing control is handled by page-level classes on the main element.
