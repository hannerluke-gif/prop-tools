.hero {
  color: $white;
  // Fallback background to avoid white/transparent flash during slide transitions.
  // Dark neutral so gradients + images blend while loading / animating.
  background-color: #121217; // dark neutral fallback
  // Anchor absolutely-positioned UI (dots/arrows) to hero for stable positioning.
  position: relative;
  overflow: hidden; // hide off-screen slides for sliding animation

  // Let the Bootstrap container actually inherit the hero's height
  > .container-fluid {
    min-height: inherit;  // picks up the hero's min-height/height
    height: 100%;

    @include media-breakpoint-up(xl) {
      min-height: 100%;
      height: 100%;
    }
  }

  // 1) Make height stable on mobile with svh (fallback to dvh)
  min-height: 50svh;
  @supports not (height: 100svh) { min-height: 50dvh; }

  width: 100%;

  // Desktop/tablet: fixed height that’s stable
  @include media-breakpoint-up(xl) {
    height: calc(100svh - 100px);
    min-height: calc(100svh - 100px); // ensure min-height exists at xl too
    @supports not (height: 100svh) { height: calc(100dvh - 100px); }
  }

  // Slides absolutely positioned + animated with transform (slide in from right)
  // Keep internal layout flex for existing content alignment.
  .hero-slide {
    position: absolute;
  inset: 0 0 0 0; // fill the hero container
    display: flex;
  align-items: flex-end;       // bottom-anchored
  justify-content: flex-start; // left-aligned
  pointer-events: none; // prevent interaction when inactive

  // Ensure the slide fills hero’s computed height
    min-height: inherit;

  // Bottom-only padding so content sits above edge consistently
    padding: 0 0.5rem 3.5rem; // mobile: small padding

    @include media-breakpoint-up(xl) {
      padding: 0 0.5rem 3.5rem; // fixed padding on desktop
      height: 100%;
      min-height: 100%;
    }

  // Initial/off-screen state: positioned to the right
  transform: translateX(100%);
  opacity: 0;
  // Single consolidated transition declared below (includes background-size)
  // GPU hint to reduce flicker during transforms
  will-change: transform, opacity;
  backface-visibility: hidden;

  // Static background properties (CSP-safe)
  background-repeat: no-repeat;
  background-position: center center;
  // Base size; zoom states adjust via data-zoom & active classes
  background-size: 100% auto;
  // Baseline transition for background-size (avoid JS inline mutation)
  transition: transform 520ms cubic-bezier(.2,.9,.25,1), opacity 320ms ease, background-size 7000ms ease;
    
  // Zoom in: start larger and scale down when active
  // Retain legacy semantic zoom directions (optional)
    &[data-zoom="in"] {
      background-size: 120% auto;
      &.is-active { background-size: 100% auto; }
    }
    &[data-zoom="out"] {
      background-size: 100% auto;
      &.is-active { background-size: 120% auto; }
    }

    &.is-active {
      transform: translateX(0%);
      opacity: 1;
  pointer-events: auto; // allow interaction for the active slide
      z-index: 3;
    }

  // Optional exit state: push left for full sliding effect
    &.is-exiting {
      transform: translateX(-30%);
      opacity: 0;
      z-index: 2;
    }
  }

  /* Optional discrete zoom percentage presets (arbitrary numeric factors) */
  .hero-slide.is-active[data-zoom="1.04"] { background-size: 104% auto; }
  .hero-slide.is-active[data-zoom="1.08"] { background-size: 108% auto; }
  .hero-slide.is-active[data-zoom="1.12"] { background-size: 112% auto; }
  .hero-slide.is-active[data-zoom="1.16"] { background-size: 116% auto; }
  .hero-slide.is-active[data-zoom="1.20"] { background-size: 120% auto; }

  .hero-slide-inner {
    position: relative;
    z-index: 2;
  max-width: 560px; // base content width (mobile ~560px)
    padding-bottom: 0;
    margin-block-end: env(safe-area-inset-bottom, 0);
    overflow: visible;
    // Responsive wider container for large screens
    @include media-breakpoint-up(lg) { max-width: 56rem; }
  }

  .hero-headline {
    font-size: clamp(2.1rem, 6vw, 3.3rem);
    line-height: 1.1;
    margin: 0 0 .9rem;
    font-weight: 900;
    letter-spacing: -0.5px;
    padding-bottom: 4px;
    display: inline-block;
    color: #fff;
    max-width: 15ch;
  // Text clamping (2 lines mobile, 3 desktop)
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    @include media-breakpoint-up(lg) {
      -webkit-line-clamp: 3;
      line-clamp: 3;
    }
    @supports not (-webkit-line-clamp: 2) {
      max-height: 2.2em; // approx 2 lines
      line-height: 1.1;
      overflow: hidden;
      @include media-breakpoint-up(lg) { max-height: 3.3em; }
    }
  }

  .hero-subline {
    margin: 0 0 1.35rem;
    font-size: clamp(1rem, 1.2vw + .65rem, 1.25rem);
    color: #fff;
    font-weight: 500;
    max-width: 28ch;
  }

  // Base hero CTA styles (do NOT hard-force background so variants work)
  .hero-cta {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 1rem 1.55rem;
    border-radius: $btn-border-radius;
    font-weight: $btn-font-weight;
    font-size: $btn-font-size;
    text-decoration: none;
    transition: none; // keep flat look

    // Primary variant (explicit only). No legacy fallback.
    &.btn-primary {
      background: $promo-cta-color;
      color: $btn-color;
      border: 1px solid $promo-cta-color;
    }

    // Secondary variant already has its own styles from global buttons, but tweak spacing if needed
    &.btn-secondary {
      // Ensure padding matches hero scale without clobbering color/background
      padding: 1rem 1.55rem;
    }

    // Tertiary variant keeps dark background from global definition; ensure consistent padding
    &.btn-tertiary {
      padding: 1rem 1.55rem;
    }

  // Mobile: slightly reduced padding to match promo banner
    @media (max-width: 540px) {
      padding: 0.5rem 0.9rem;
      font-size: $btn-font-size;
      border-radius: $btn-border-radius;
    }

  // Desktop hover/focus lift preserved from promo banner
    @media (min-width: 768px) {
      &:hover,
      &:focus {
        transform: none; // no movement on hover
        // no box-shadow on hover to keep visuals flat
      }
    }

  // Remove Bootstrap default focus/active ring + primary background
  // Use project focus styling for consistency + a11y
    &:focus {
  // Reset bootstrap outline/box-shadow
      outline: none;
      box-shadow: 0 0 0 3px rgba(255,255,255,0.06); /* subtle white ring */
    }

    &:active,
    &.active {
      transform: none; /* avoid jump on active */
    }

    // CSS var overrides for primary style only
    &.btn-primary,
    &:not(.btn-secondary):not(.btn-tertiary):not(.btn-outline-secondary) {
      --bs-btn-focus-box-shadow: 0 0 0 0.15rem rgba(255,255,255,0.06);
      --bs-btn-focus-shadow-rgb: 255,255,255;
      --bs-btn-active-bg: #{$promo-cta-color};
      --bs-btn-bg: #{$promo-cta-color};
      --bs-btn-border-color: #{$promo-cta-color};
      --bs-btn-hover-bg: #{$btn-primary-hover-bg};
      --bs-btn-hover-border-color: #{$btn-primary-hover-bg};
      --bs-btn-hover-color: #{$btn-color};
    }
  }

  // Explicit custom focus-visible style (neutral ring, not theme blue)
  // Consolidated focus + active states
  .hero-cta:focus-visible,
  .btn.hero-cta:focus-visible {
    outline: none;
    box-shadow: 0 0 0 0.25rem rgba(255,255,255,0.14);
    // Do not force background; rely on variant-specific variables
  }

  .btn.hero-cta:focus { outline: none; box-shadow: 0 0 0 0.25rem rgba(255,255,255,0.14); }

  .btn.hero-cta:active,
  .btn.hero-cta.active,
  .btn.hero-cta.show {
    box-shadow: none;
  }

  // === CAROUSEL EXTENSIONS ===

  // Multiple slides handled by absolute transforms (avoid display:none for smoothness)



  /* Text clamping for sublines: 2 lines on all sizes */
  .hero-subline {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;

    /* Fallback for browsers without webkit-line-clamp */
    @supports not (-webkit-line-clamp: 2) {
      max-height: 2.5em; /* approximate 2 lines */
      overflow: hidden;
    }
  }

  // (Removed disabled state styles; hero CTAs are always enabled now.)

  // === CAROUSEL UI ===

  // Dots container - centered with inline arrows and dots
  .hero__dots {
    position: absolute;
    bottom: 1rem;
    left: 50%;
    transform: translateX(-50%);
    z-index: 5;
    
    display: flex;
    gap: 1rem;
    justify-content: center;
    align-items: center;
    
    @include media-breakpoint-up(lg) {
      bottom: 2rem;
    }
  }

  // Navigation arrows - inline within dots container
  .hero__arrow {
  // Minimal text-only arrows: no background, no pseudo-elements
    background: transparent;
    border: none;
    border-radius: 0;
    
    width: auto;
    height: auto;
    
    color: $white;
    font-size: 2rem;
    cursor: pointer;
    
    display: inline-flex;
    align-items: center;
    justify-content: center;
    
    padding: 0.25rem 0.5rem;
    line-height: 1;
    
  // Remove any CSS triangles
    &::before { content: none; }
  
    &:focus-visible {
      outline: 2px solid rgba(255, 255, 255, 0.6);
      outline-offset: 2px;
      border-radius: 2px;
    }
    
  // Larger arrows on desktop
    @include media-breakpoint-up(lg) {
      font-size: 2rem;
    }
  }

  // Individual dots
  .hero__dot {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: none;
    background: rgba(255,255,255,0.38);
    padding: 0;
    cursor: pointer;
    transition: background .35s ease, transform .4s ease;

    &.is-active {
      background: #fff;
      transform: scale(1.6);
      box-shadow: none;
    }

    &:focus-visible {
      outline: 2px solid var(--brand-2);
      outline-offset: 2px;
    }
  }
}

// When the hero is placed immediately inside `main.pt-2` (the app's layout adds
// a small top padding), cancel that single padding so the hero background meets
// the sticky site banner without visual gap. This is intentionally scoped and
// only applies when the site uses `pt-2` on the main element.
// Spacing control is handled by page-level classes on the main element.
