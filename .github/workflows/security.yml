name: Security CI

on:
  push:
  pull_request:

permissions:
  contents: read

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

jobs:
  python-security:
    name: "Python: pip-audit + bandit"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pip-audit bandit

      # Generate JSON reports and keep artifacts even if they fail
      - id: pip_audit
        name: pip-audit (fail on any vulnerability)
        continue-on-error: true
        run: pip-audit --strict --ignore-package pip -f json -o pip-audit.json

      - id: bandit
        name: Bandit (report high severity+confidence)
        continue-on-error: true
        run: bandit -r . -lll -iii -f json -o bandit.json

      - name: Upload Python audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-audits
          path: |
            pip-audit.json
            bandit.json

      # Hard fail if either audit step failed
      - name: Fail if audits found issues
        if: steps.pip_audit.outcome == 'failure' || steps.bandit.outcome == 'failure'
        run: exit 1

  node-security:
    name: "Node: npm audit (high+)"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect presence of any package.json outside node_modules
      - id: detect_node
        name: Detect Node project
        shell: bash
        run: |
          if find . -path "*/node_modules/*" -prune -o -name "package.json" -print -quit | grep -q .; then
            echo "has_node=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_node=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Node
        if: steps.detect_node.outputs.has_node == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install (prefer lockfile)
        if: steps.detect_node.outputs.has_node == 'true'
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      - id: npm_audit
        name: npm audit (high+ only)
        if: steps.detect_node.outputs.has_node == 'true'
        continue-on-error: true
        run: npm audit --audit-level=high --json > npm-audit.json

      - name: Upload Node audit artifact
        if: steps.detect_node.outputs.has_node == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: node-audits
          path: npm-audit.json

      - name: Fail if audits found issues
        if: steps.detect_node.outputs.has_node == 'true' && steps.npm_audit.outcome == 'failure'
        run: exit 1

  headers-smoke:
    name: "Optional: headers smoke test (prod)"
    runs-on: ubuntu-latest

    steps:
      - name: Load PROD_URL from repo variables (if any)
        shell: bash
        run: |
          # This line is safe even if the variable doesn't exist
          echo "PROD_URL=${{ vars.PROD_URL }}" >> "$GITHUB_ENV"

      - id: gate
        name: Check PROD_URL
        shell: bash
        run: |
          if [ -z "${PROD_URL}" ]; then
            echo "No PROD_URL set. Skipping headers smoke test."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Curl headers
        if: steps.gate.outputs.skip != 'true'
        shell: bash
        run: |
          echo "Checking ${PROD_URL}"
          curl -sI "${PROD_URL}" | tee headers.txt
          # Case-insensitive search so lowercase/uppercase headers both pass
          grep -Ei "strict-transport-security|content-security-policy|x-content-type-options|x-frame-options|referrer-policy|permissions-policy|cross-origin-" headers.txt


      - name: Upload headers
        if: steps.gate.outputs.skip != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: prod-headers
          path: headers.txt
